var X=Object.defineProperty;var r=(t,e)=>X(t,"name",{value:e,configurable:!0});function $(){return[]}r($,"arr");function lt(t){return t.flat()}r(lt,"arr_flat");function tt(t,e,n=!0){return delete t[e],n?t.filter(o=>o!=null):t}r(tt,"arr_delete");function pt(t){return t[Math.floor(Math.random()*t.length)]}r(pt,"arr_rand");function gt(t,e){let n=r(function(i){return Math.floor(Math.random()*i.length)},"rindex"),o=t,u=$();for(let i=0;i<=e;i++){let l=n(o),b=o[l];o=tt(o,l),u.push(b)}return u}r(gt,"arr_rands");import L from"vm";import et from"tty";var rt=!("NO_COLOR"in process.env||process.argv.includes("--no-color"))&&("FORCE_COLOR"in process.env||process.argv.includes("--color")||process.platform==="win32"||et.isatty(1)&&process.env.TERM!=="dumb"||"CI"in process.env),f=r((t,e,n=t)=>o=>{let u=""+o,i=u.indexOf(e,t.length);return~i?t+I(u,e,n,i)+e:t+u+e},"formatter"),I=r((t,e,n,o)=>{let u=t.substring(0,o)+n,i=t.substring(o+e.length),l=i.indexOf(e);return~l?u+I(i,e,n,l):u+i},"replaceClose"),nt=r((t=rt)=>({isColorSupported:t,reset:t?e=>`\x1B[0m${e}\x1B[0m`:String,bold:t?f("\x1B[1m","\x1B[22m","\x1B[22m\x1B[1m"):String,dim:t?f("\x1B[2m","\x1B[22m","\x1B[22m\x1B[2m"):String,italic:t?f("\x1B[3m","\x1B[23m"):String,underline:t?f("\x1B[4m","\x1B[24m"):String,inverse:t?f("\x1B[7m","\x1B[27m"):String,hidden:t?f("\x1B[8m","\x1B[28m"):String,strikethrough:t?f("\x1B[9m","\x1B[29m"):String,black:t?f("\x1B[30m","\x1B[39m"):String,red:t?f("\x1B[31m","\x1B[39m"):String,green:t?f("\x1B[32m","\x1B[39m"):String,yellow:t?f("\x1B[33m","\x1B[39m"):String,blue:t?f("\x1B[34m","\x1B[39m"):String,magenta:t?f("\x1B[35m","\x1B[39m"):String,cyan:t?f("\x1B[36m","\x1B[39m"):String,white:t?f("\x1B[37m","\x1B[39m"):String,gray:t?f("\x1B[90m","\x1B[39m"):String,bgBlack:t?f("\x1B[40m","\x1B[49m"):String,bgRed:t?f("\x1B[41m","\x1B[49m"):String,bgGreen:t?f("\x1B[42m","\x1B[49m"):String,bgYellow:t?f("\x1B[43m","\x1B[49m"):String,bgBlue:t?f("\x1B[44m","\x1B[49m"):String,bgMagenta:t?f("\x1B[45m","\x1B[49m"):String,bgCyan:t?f("\x1B[46m","\x1B[49m"):String,bgWhite:t?f("\x1B[47m","\x1B[49m"):String}),"createColors"),x=nt();function yt(t){if(!Number.isFinite(t))throw`cannot format non-finite number: ${t}`;if(t===0)return"0 B";if(t<0&&(t=-t),t<1)return`${t} B`;let e=["B","kB","MB","GB","TB","PB"],n=Math.min(Math.floor(Math.log10(t)/3),e.length-1);t/=1e3**n;let o=e[n];return`${t.toPrecision(3)} ${o}`}r(yt,"fmt_bytes");function C(t){function e(s){switch(typeof s){case"string":return o;case"number":return n;case"boolean":return u;case"function":return h;case"symbol":return d;case"undefined":return a;default:return s?Array.isArray(s)?b:l:a}}r(e,"_by_type");function n(s){return x.yellow(s)}r(n,"_num");function o(s){return x.green(`"${s}"`)}r(o,"_str");function u(s){return x.yellow(s?"true":"false")}r(u,"_bool");function i(s){let c="";for(let p=0;p<s;p++)c+=" ";return c}r(i,"spaces");function l(s,c=0){function p(v){return v.includes(" ")?`"${v}"`:v}r(p,"_fmt_key");let g=Object.keys(s);if(g.length===0)return x.white("{}");let _="{",w=0;for(let v of g)_+=`
${i((c+1)*2)}${p(v)}: ${e(s[v])(s[v],c+1)}${w===g.length-1?"":","}`,w++;return x.white(`${_}
${i(c*2)}}`)}r(l,"_obj");function b(s,c=0){if(s.length===0)return"[]";let p="[",g=0;for(let _ of s)p+=`
${i((c+1)*2)}${e(_)(_,c+1)}${g===s.length-1?"":","}`,g++;return`${p}
${i(c*2)}]`}r(b,"_arr");function h(s){return x.cyan(`[Function (${s.name})]`)}r(h,"_fn");function d(s){return x.green(`[Symbol (${s.description})]`)}r(d,"_sym");function a(s){return x.gray("undefined")}return r(a,"_und"),e(t)(t)}r(C,"fmt_json");function _t(t){let e=t.getTime(),n=0,o=0,u=0;for(;e>=1e3;)e-=1e3,n++;for(;n>=60;)n/-60,o++;for(;o>=60;)o-=60,u++;let i="";return u>0&&(i+=`${u}h `),i+=`${o}m ${n}s ${e}ms`,i}r(_t,"fmt_time");function q(t){return t&&t.constructor&&typeof t.constructor.isBuffer=="function"&&t.constructor.isBuffer(t)}r(q,"isBuffer");var J=r(t=>t,"keyIdentity");function A(t,e){e=e||{};let n=e.delimiter||".",o=e.maxDepth,u=e.transformKey||J,i={};function l(b,h,d=0){d=d||1,Object.keys(b).forEach(function(a){let s=b[a],c=e.safe&&Array.isArray(s),p=Object.prototype.toString.call(s),g=q(s),_=p==="[object Object]"||p==="[object Array]",w=h?h+n+u(a):u(a);if(!c&&!g&&_&&Object.keys(s).length&&(!e.maxDepth||d<o))return l(s,w,d+1);i[w]=s})}return r(l,"step"),l(t),i}r(A,"flatten");function k(t,e){e=e||{};let n=e.delimiter||".",o=e.overwrite||!1,u=e.transformKey||J,i={};if(q(t)||Object.prototype.toString.call(t)!=="[object Object]")return t;function b(a){let s=Number(a);return isNaN(s)||a.indexOf(".")!==-1||e.object?a:s}r(b,"getkey");function h(a,s,c){return Object.keys(c).reduce(function(p,g){return p[a+n+g]=c[g],p},s)}r(h,"addKeys");function d(a){let s=Object.prototype.toString.call(a),c=s==="[object Array]",p=s==="[object Object]";if(a){if(c)return!a.length;if(p)return!Object.keys(a).length}else return!0}return r(d,"isEmpty"),t=Object.keys(t).reduce(function(a,s){let c=Object.prototype.toString.call(t[s]);return!(c==="[object Object]"||c==="[object Array]")||d(t[s])?(a[s]=t[s],a):h(s,a,A(t[s],e))},{}),Object.keys(t).forEach(function(a){let s=a.split(n).map(u),c=b(s.shift()),p=b(s[0]),g=i;for(;p!==void 0;){if(c==="__proto__")return;let _=Object.prototype.toString.call(g[c]),w=_==="[object Object]"||_==="[object Array]";if(!o&&!w&&typeof g[c]<"u")return;(o&&!w||!o&&g[c]==null)&&(g[c]=typeof p=="number"&&!e.object?[]:{}),g=g[c],s.length>0&&(c=b(s.shift()),p=b(s[0]))}g[c]=k(t[a],e)}),i}r(k,"unflatten");function K(t,e){return{...e,...t}}r(K,"obj_default");function ot(t){return A(t)}r(ot,"obj_flat");function jt(t,e){return ot(t)[e]}r(jt,"obj_key");function st(t,e){let{context:n,logger:o,printContext:u}=K(e,{}),i={...n||{},result:void 0};L.createContext(i),L.runInContext(`result = (${t});`,i);let l=i.result;o?(o.raw(x.magenta("statement:"),`${t} = ${l}
`),u===!0&&o.raw(x.magenta("statement:"),`=> context: ${C(n)}
`)):(process.stdout.write(`[statement] ${t} = ${l}
`),u===!0&&process.stdout.write(`[statement] => context: ${C(n)}
`))}r(st,"log_statement");var O=class{constructor(){if(!process||!process.stdout||!process.stderr)throw"error: for the logger, we require to have a node.js environment or a node.js procss-like constant set"}#t(e,...n){e.write(n.join(" "))}info(...e){this.#t(process.stdout,x.green("info:"),...e,`
`)}debug(...e){this.#t(process.stdout,x.cyan("debug:"),...e,`
`)}warn(...e){this.#t(process.stderr,x.yellow("warn:"),...e,`
`)}error(...e){this.#t(process.stderr,x.red("error:"),...e,`
`)}raw(...e){this.#t(process.stdout,...e)}time(){this.info(new Date().toLocaleString())}json(e){this.#t(process.stdout,x.gray("json:"),C(e),`
`)}overwriteConsole(){console.log=console.info=this.info,console.debug=this.debug,console.warn=this.warn,console.error=this.error}};r(O,"Logger");var T=class{bound;#t;throwOnFalseValue;constructor(e){this.bound=e.bound;let[n,o]=this.bound;if(o>n)throw`Highest possible (${n}) is lower than the lowest possible (${o}).`;this.#t=e.value||0,this.throwOnFalseValue=e.throwOnFalseValue||!1}get value(){return this.#t}set value(e){let[n,o]=this.bound;if(V(e,n,o)){this.#t=e;return}if(this.throwOnFalseValue)throw`Given Number (${e}) does not satisfy the requirements: <${n} and >${o}.`}action(e){this.value=e(this.value)}inc(){this.value+=1}dec(){this.value-=1}plus(e){this.value+=e}minus(e){this.value-=e}multiply(e){this.value*=e}divide(e){this.value/=e}modulo(e){this.value%=e}exponent(e){this.value=Math.pow(this.value,e)}assign(e){this.value=e}str(e=0){return e<=0?""+this.value:this.value.toFixed(e)}};r(T,"BoundNumber");function Ft(t,e){let n=[];for(let o=t;o<e;o++)n.push(o);return n}r(Ft,"num_range");function*Mt(t,e){for(let n=t;n<e;n++)yield n}r(Mt,"num_range_iter");function It(t,e,n){return new T({value:t,bound:[n,e]})}r(It,"num_bound");function N(t,e,n){return e>t&&t>n}r(N,"num_between");function V(t,e,n){return N(t,e,n)||t===e||t===n}r(V,"num_between_inc");function qt(t,e=0){return Math.random()*(t-e)+e}r(qt,"num_rand");var it=new O;function B(t,e,n=1){it.error(`${t}: ${e}`),process.exit(n)}r(B,"_error");function E(t,e){t||B("assertion of statement failed",e)}r(E,"assert");function Vt(t,e,n){E((()=>t.equals!==void 0&&typeof t.equals=="function"?t.equals(e):e.equals!==void 0&&typeof e.equals=="function"?e.equals(t):t===e)(),n)}r(Vt,"assert_equals");function Et(t,e,n,o){E(N(t,e,n),o)}r(Et,"assert_between");function Ut(t,e){if(typeof t=="number")return t;if(typeof t=="string")return parseInt(t);throw B(`given value (${t}) is no number`,e),""}r(Ut,"assert_number");function Pt(t,e){let n=0;for(let o of e)o.function(t)||B("assertion failed on assertion-check #"+n,o.message),n++}r(Pt,"assert_matches");import at from"hocon-parser";import R from"fs";function ut(t){return R.existsSync(t)}r(ut,"fs_exists");function Gt(t){ut(t)||S(t,"")}r(Gt,"fs_create");function S(t,e){R.writeFileSync(t,e)}r(S,"fs_write");function j(t){return R.readFileSync(t,"utf-8")}r(j,"fs_read");function U(t){return JSON.parse(j(t))}r(U,"fs_json");var P={load(t){return at.parseHocon(j(t))},save(t,e){throw"no implementation for saving HOCON-configuration files."}};var z={load(t){return U(t)},save(t,e){S(t,JSON.stringify(e,void 0,4))}};var D={load(t){let e=j(t),n={};for(let o of e.split(`
`)){if(o.trim().replaceAll(`
`,"")==="")continue;let u=/^([a-zA-Z0-9.-]+)=(.+)$/g.exec(o);if(!u)throw`unknown configuration format: "<key>=<value>" does not match: "${o}".`;let[i,l]=u;n[i]=l}return k(n)},save(t,e){let n=Object.keys(e).map(o=>`${o}=${e[o]}`).join(`
`);S(t,n)}};import G from"js-yaml";var H={load(t){return G.load(j(t))},save(t,e){S(t,G.dump(e))}};var W=new Map([["json",z],["yaml",H],["hocon",P],["properties",D]]);function ct(t,e){return W.get(e)?.load(t)}r(ct,"cfg_load");function mt(t,e,n){W.get(n)?.save(t,e)}r(mt,"cfg_save");function fe(t){return{store:void 0,get(){return this.store||(this.store=t()),this.store}}}r(fe,"lazy");import*as Y from"node:dns";import*as m from"node:os";import*as y from"node:process";function pe(){return{computer:{cpus:{list:m.cpus(),usage:y.cpuUsage()},ipAddresses:Y.getServers(),memory:{free:m.freemem(),usage:y.memoryUsage(),total:m.totalmem()},network:m.networkInterfaces(),uptime:m.uptime()},os:{arch:m.arch(),host:m.hostname(),platform:m.platform(),release:m.release(),type:m.type(),version:m.version()},user:{home:m.homedir(),info:m.userInfo(),tmp:m.tmpdir()},node:{env:y.env,pid:y.pid,release:y.release,title:y.title,versions:y.versions}}}r(pe,"os_spec");var F=$(),Z=$();function M(t,e){if(t===e)return 0;let n=t;t.length>e.length&&(t=e,e=n);let o=t.length,u=e.length;for(;o>0&&t.charCodeAt(~-o)===e.charCodeAt(~-u);)o--,u--;let i=0;for(;i<o&&t.charCodeAt(i)===e.charCodeAt(i);)i++;if(o-=i,u-=i,o===0)return u;let l,b,h,d,a=0,s=0;for(;a<o;)Z[a]=t.charCodeAt(i+a),F[a]=++a;for(;s<u;)for(l=e.charCodeAt(i+s),h=s++,b=s,a=0;a<o;a++)d=l===Z[a]?h:h+1,h=F[a],b=F[a]=h>b?d>b?b+1:d:d>h?h+1:d;return b}r(M,"leven");function de(t,e,n={replace:"{}"}){let{replace:o}=n;for(;t.includes(o)&&e.length>0;)t=t.replace(o,e.shift());return t}r(de,"str_fmt");function ye(t,e){let n=t.match(new RegExp(e,"g"));return n===null?0:n.length}r(ye,"str_count");function Q(t,e){return M(t,e)}r(Q,"str_distance");function _e(t,e,n=1){if(e.length===0)return;let o={},u=e.sort((i,l)=>(o[i]||(o[i]=Q(i,t)))-(o[l]||(o[l]=Q(l,t)))).reverse();if(n===-1)return u;if(n===1)return u[0];if(n>=0)return u.slice(0,n)}r(_e,"str_nearest");function we(t,e){return(e>0?Array(e).fill(t):[]).join("")}r(we,"str_repeat");export{T as BoundNumber,O as Logger,$ as arr,tt as arr_delete,lt as arr_flat,pt as arr_rand,gt as arr_rands,E as assert,Et as assert_between,Vt as assert_equals,Pt as assert_matches,Ut as assert_number,ct as cfg_load,mt as cfg_save,yt as fmt_bytes,C as fmt_json,_t as fmt_time,Gt as fs_create,ut as fs_exists,U as fs_json,j as fs_read,S as fs_write,fe as lazy,st as log_statement,N as num_between,V as num_between_inc,It as num_bound,qt as num_rand,Ft as num_range,Mt as num_range_iter,K as obj_default,ot as obj_flat,jt as obj_key,pe as os_spec,ye as str_count,Q as str_distance,de as str_fmt,_e as str_nearest,we as str_repeat};
//# sourceMappingURL=data:application/json;base64,